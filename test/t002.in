# $ProjectHeader: use 2-1-0-release.1 Sun, 09 May 2004 13:57:11 +0200 mr $

# See the README file in this directory for information about the file
# format.

# create some objects

!create a1:A
!set a1.a := 5
!create a2:A

!create b1:B

!create c1:C

!insert(a1,c1) into A_C
!insert(b1,c1) into A_C

#
## allInstances
#

? B.allInstances
*-> Set{@b1} : Set(B)

? A.allInstances
*-> Set{@a1,@a2,@b1} : Set(A)

#
## navigation
#

? a1.c
*-> Set{@c1} : Set(C)

? c1.a
*-> Set{@a1,@b1} : Set(A)

#
## subtyping
#

? 3.oclIsKindOf(Real)
*-> true : Boolean

? 3.oclIsKindOf(OclAny)
*-> true : Boolean

? b1.oclIsKindOf(A)
*-> true : Boolean

? b1.oclIsKindOf(OclAny)
*-> true : Boolean

? b1.oclIsKindOf(B)
*-> true : Boolean

? a1.oclIsKindOf(B)
*-> false : Boolean

? Set{a1,a2}.oclIsKindOf(OclAny)
*-> Bag{true,true} : Bag(Boolean)

? Set{a1,a2}->including(b1)->select(o | o.oclIsKindOf(B))
*-> Set{@b1} : Set(A)

? Set{a1,a2}->including(b1)->select(o : OclAny | o.oclIsKindOf(OclAny))
*-> Set{@a1,@a2,@b1} : Set(A)

? 3.oclIsTypeOf(Real)
*-> false : Boolean

? b1.oclIsTypeOf(A)
*-> false : Boolean

? b1.oclIsTypeOf(B)
*-> true : Boolean

? a1.oclIsTypeOf(B)
*-> false : Boolean

? Set{a1,a2}->including(b1)->select(o | o.oclIsTypeOf(B))
*-> Set{@b1} : Set(A)

? Set{Set{a1},Set{a2}}->select(s : Collection(A) | s->notEmpty)
*-> Set{Set{@a1},Set{@a2}} : Set(Set(A))

? Set{false,true}->collect(b : OclAny | b.oclAsType(Boolean))
*-> Bag{false,true} : Bag(Boolean)

? Set{false,true}->collect(b : OclAny | b)
*-> Bag{false,true} : Bag(OclAny)

? Set{1,2}->collect(i : OclAny | i.oclAsType(Integer))
*-> Bag{1,2} : Bag(Integer)

? Set{1,2}->collect(i : OclAny | i.oclAsType(Real))
*-> Bag{1,2} : Bag(Real)

#
## equality
#

? a1 = a1
*-> true : Boolean

? a1 = a2
*-> false : Boolean

? a1 = b1
*-> false : Boolean

#
## enumerations
#

? Set{#red, #green, #blue}->size
*-> 3 : Integer

? Set{#red, #green, #blue}->select(c : colorEnum | c = #green)
*-> Set{#green} : Set(colorEnum)

#
## recursion
#

? a1.fac(3)
*-> 6 : Integer

#
## element of a singleton
#

? Set{a1}->iterate(v; result : A = oclUndefined(A) | v)
*-> @a1 : A

exit
